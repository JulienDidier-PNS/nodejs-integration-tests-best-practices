# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  build_without_cache:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
      id: nvm

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"
    - run: sudo apt-get update
    - run: sudo apt-get install -y docker-compose
    - run: npm ci
    - run: npm test
    - run: npm run test:nestjs
    - run: npm run test:mocha

  build_with_cache:
    runs-on: ubuntu-latest

    steps:
      # Récupérer le code source
      - uses: actions/checkout@v2

      # Lire la version de Node.js depuis .nvmrc
      - name: Read .nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV

      # Configurer la version de Node.js avec cache npm activé
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NVMRC }}
          cache: 'npm'

      # Installer docker-compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Installer les dépendances
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci


      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Exécuter les tests
      - name: Run tests
        run: |
          npm test
          npm run test:nestjs
          npm run test:mocha

