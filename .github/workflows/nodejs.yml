# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  build_without_cache:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Read .nvmrc
      run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
      id: nvm

    - name: Use Node.js (.nvmrc)
      uses: actions/setup-node@v2
      with:
        node-version: "${{ steps.nvm.outputs.NVMRC }}"
    - run: sudo apt-get update
    - run: sudo apt-get install -y docker-compose
    - run: npm ci
    - run: npm test
    - run: npm run test:nestjs
    - run: npm run test:mocha

  build_with_cache:
    runs-on: ubuntu-latest

    steps:
      # Récupérer le code source
      - uses: actions/checkout@v2

      # Lire la version de Node.js depuis .nvmrc
      - name: Read .nvmrc
        run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_ENV

      # Configurer la version de Node.js avec cache npm activé
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
          cache: 'npm'

      - name: Attempt to restore the cache
        uses: actions/cache@v3
        id: cache
        with:
          path: ./node_modules
          # The hashFiles function is used to generate a unique key for the cache based on the contents of the package-lock.json file.
          # This ensures that the cache is only invalidated when the dependencies of the project change.
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          # 'restore-keys' are fallback keys used if a cache miss occurs on the 'key' field. They provide a way to restore
          # a cache from a previous state that doesn't match exactly with the 'key'. They are checked sequentially until a cache hit is found.
          # A list of restore-keys is useful when you are restoring a cache from another branch because restore-keys can partially match cache keys.
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      # Installer les dépendances
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci

      - name: Save the cache after installing dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - run: sudo apt-get update
      - run: sudo apt-get install -y docker-compose

      - name: Sharing with other jobs
        run: mkdir -p ~/node-modules
      - uses: actions/upload-artifact@v4
        with:
          name: node-modules
          path: ~/node-modules

  nestjsTest:
    name: Run nestjs test
    needs: build_with_cache
    runs-on: ubuntu-latest
    steps:
      - name: Get node-modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: ~/node-modules
      - name: Run nextjs test
        run: npm run test:nestjs

  mochaTest:
    name: Run mochatest test
    needs: build_with_cache
    runs-on: ubuntu-latest
    steps:
      - name: Get node-modules
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: ~/node-modules
      - name: Run nextjs test
        run: npm run test:mocha
